apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        textReport true // 输出lint报告
        textOutput 'stdout'
        abortOnError false // 遇到错误不停止
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':module_article')
//    lintChecks project(':lintrules')

}

// 定义lintJarImport方法，在copyLintJar任务中被调用
configurations {
    lintJarImport
}

dependencies {
    // 调用lintjar的lintJarOutput方法，获得jar包
    lintJarImport project(path: ':lintrules', configuration: 'lintJarOutput')
    compile project(':library')
    //    lintChecks project(':lintrules')
}

// 调用lintJarImport得到jar包，拷贝到指定目录
task copyLintJar(type: Copy) {

    from(configurations.lintJarImport) {
        rename {
            String fileName ->
                'lint.jar'
        }

    }
    into 'build/intermediates/lint/'
}

// 当项目执行到prepareLintJar这一步时执行copyLintJar方法（注意：这个时机需要根据项目具体情况改变）
project.afterEvaluate {
//    def compileLintTask = project.tasks.find{ it.name == 'prepareLintJar'}
//    def lintTask = project.getTasks().getByName("lint")
//    compileLintTask.dependsOn(copyLintJar)
//    lintTask.doFirst{
//        System.out.println(project.name+"::::::::::: doFirst")
//        copyLintJar
//    }

    def compileLintTask = project.tasks.find { it.name == 'compileLint' }
    compileLintTask.dependsOn(copyLintJar)
}
tasks.whenTaskAdded { task ->
    if (task.name.contains('lint')) {
        System.out.println(project.name + "::::::::::: " + task.name)
    }
}
//project.getGradle().addListener(new DependencyResolutionListener() {
//    @Override
//    void beforeResolve(ResolvableDependencies resolvableDependencies) {
//        //此回调会多次进入，我们只需要解析一次，因此只要进入，就remove，然后执行我们的解析操作
//        project.gradle.removeListener(this)
//        project.getRepositories().each { def repository ->
//            //repository.url就是maven服务的前缀路径，可能是文件协议，也可能是http协议，或是其他协议，如ftp
//        }
//        resolvableDependencies.afterResolve{
//            println(resolvableDependencies.getName() + " path after 3  : " +resolvableDependencies.getPath() )
//        }
//
//        println(resolvableDependencies.getName() + " path   before : " +resolvableDependencies.getPath() )
//    }
//
//    @Override
//    void afterResolve(ResolvableDependencies resolvableDependencies) {
//        println(resolvableDependencies.getName() + " path  after  : " +resolvableDependencies.getPath() )
//    }
//})
