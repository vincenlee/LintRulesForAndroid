apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        textReport true // 输出lint报告
        textOutput 'stdout'
        abortOnError false // 遇到错误不停止
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })


    compile 'com.android.support:appcompat-v7:25.3.1'
    testCompile 'junit:junit:4.12'
}

// 定义lintJarImport方法，在copyLintJar任务中被调用
configurations {
    lintJarImport
}

dependencies {
    // 调用lintjar的lintJarOutput方法，获得jar包
    lintJarImport project(path: ':lintrules', configuration: 'lintJarOutput')
    compile project(':library')
    //    lintChecks project(':lintrules')
}

// 调用lintJarImport得到jar包，拷贝到指定目录
task copyLintJar(type: Copy) {
    from(configurations.lintJarImport) {
        rename {
            String fileName ->
                'lint.jar'
        }

    }
    into 'build/intermediates/lint/'
}

// 当项目执行到prepareLintJar这一步时执行copyLintJar方法（注意：这个时机需要根据项目具体情况改变）
project.afterEvaluate {
//    def compileLintTask = project.tasks.find{ it.name == 'prepareLintJar'}
//    compileLintTask.dependsOn(copyLintJar)

    def compileLintTask = project.tasks.find { it.name == 'compileLint' }
    compileLintTask.dependsOn(copyLintJar)
}
//project.getConfigurations().getByName("compile").incoming.dependencies.all {
//
//    println("------------"+ it.group+ "  group  " + it.name)
//}
